function scalar r2_score (matrix y_true "T by 1 vector of realizations",
                         matrix y_pred "T by 1 vector of estimated values")
    /* R^2 (coefficient of determination) regression score function.
       Best possible score is 1.0 and it can be negative (because the
       model can be arbitrarily worse). A constant model that always
       predicts the expected value of y, disregarding the input features,
       would get a R^2 score of 0.0.

       Notes
       -----
       This is not a symmetric function.
       Unlike most other scores, R^2 score may be negative (it need not actually
       be the square of a quantity R).
       This metric is not well-defined for single samples and will return a NaN
       value if n_samples is less than two.
       References
       ----------
       <https://github.com/scikit-learn/scikit-learn/blob/1495f69242646d239d89a5713982946b8ffcf9d9/sklearn/metrics/regression.py#L449>
       
       `Wikipedia entry on the Coefficient of determination
       <https://en.wikipedia.org/wiki/Coefficient_of_determination>`
    */

    # Initialize check values
    scalar nonzero_denominator = 0
    scalar nonzero_numerator = 0
    scalar valid_score = 0

    matrix y_true = vec(y_true)
    matrix y_pred = vec(y_pred)

    if rows(y_true) != rows(y_pred)
        printf "\nError: Vectors y_true and y_pred are of different length.\n"
        return NA
    endif
    if rows(y_pred)<2
        printf "\nError: R^2 score is not well-defined with less than two samples.\n"
        return NA
    endif
    if isconst(y_true)
        printf "\nError: Vector y_true is constant.\n"
        return NA
    endif

    # Compute statistics
    scalar numerator = sumc( (y_true-y_pred).^2)
    scalar denominator = sumc( (y_true-mean(y_true)).^2 )
    
    scalar nonzero_denominator = (denominator!=0) ? 1 : nonzero_denominator
    scalar nonzero_numerator = (numerator!=0) ? 1 : nonzero_numerator

    scalar valid_score = (nonzero_denominator && nonzero_numerator) ? 1 : valid_score
    
    scalar output_scores = 1
    
    return (valid_score) ? (1-numerator/denominator) : output_scores
end function


# sample
scalar case = 3
if case==1
    matrix y_true = {3, -0.5, 2, 7}
    matrix y_pred = {2.5, 0.0, 2, 8}		# r2 = 0.948    
elif case==2
    matrix y_true = {1, 2, 3}				# r2 = 0
    matrix y_pred = {2, 2, 2}
elif case==3
    matrix y_true = {1, 2, 3}				# r2 = -3.0
    matrix y_pred = {3, 2, 1}
elif case==4
    matrix y_true = mnormal(10,1)
    matrix y_pred = mnormal(10,1)
endif

eval r2_score(y_true, y_pred)
