set verbose off
clear 


string wd = "/home/at/git/ridge/src"
include "@wd/ridge.inp"		# SET PATH

#include ridge.gfn --force


# Select an example: 1 to 4
scalar EXAMPLE = 1

# Select an example
if EXAMPLE==1
    open australia.gdt -q --preserve
    
    # Define the variables
    series LHS = ldiff(PAU)
    list RHS = const LHS(-1 to -2) IUS(-1 to -2)  IAU(-1 to -2)    
    
    ols LHS RHS					# OLS as benchmark
    
elif EXAMPLE==2
    # Dataset from R's glmnet package
    open "@wd/glmnet_QSE.csv" --quiet  --preserve
    setobs 1 1 --special-time-series
    setobs 1 1 --cross-section

    rename X1 LHS
    list RHS = const dataset
    RHS -= LHS
    
elif EXAMPLE==3
    # SIMULATION: TIME CONSUMING
    nulldata 500
    set seed 1234
    setobs 1 1 --time-series
    series e = normal()
    e[1] = NA
    e[2] = NA
    series LHS = 1
    series LHS = 4.3 + 0.8*LHS(-1) - 0.4*LHS(-2) + 0.2*LHS(-6) + e
    matrix X = mnormal($nobs, 50)		# add 50 further random variables
    list RHS = const LHS(-1 to -6)		# arbtrary lags of the endogenous
    loop i=1..cols(X) -q
        series S$i = X[,i]
        RHS += S$i
    endloop

elif EXAMPLE==4
    # Cross-sectional
    open mroz.gdt -q --preserve    
    series LHS = hwage
    list RHS = const dataset    
    ols LHS RHS
    
    smpl --contiguous LHS RHS
endif


# Run the main function with default values
#===========================================

bundle opts = null
/* Activate if you want to control some parameters of choice

scalar opts.l_min = 0.1					# Optional: minimum lambda value (default: 0.01)
scalar opts.l_max = 300					# Optional: minimum lambda value (default: 400)
scalar opts.nlambda = 150				# Optional: number of lambda values (default: 100)
string opts.loss_type = "rmse"			# Optional: 'me', 'rmse' (default), 'mae', 'mape'
string opts.cv_type = "rolwin"			# Optional: 'kfold' (default), 'loo', 'rolwin' (default for time-series), 'recwin'
opts.cv_type = ($datatype==1) ? "kfold" : opts.cv_type		# for cross-section data it's 'kfold' here
scalar opts.win_size = int(0.5*$nobs)	# Optional: length of window, only for 'rolwin' and 'recwin' types (default: 0.7)
*/


# Run training and evaluation using cross-validation
#====================================================
set stopwatch
bundle b_ridge = Ridge(LHS, RHS, opts)
printf "\nRidge computation took %.3f seconds.\n", $stopwatch

# Plot loss as a function of lambda
plotLoss(&b_ridge)

# Plot solution path
plotBeta(&b_ridge)

# Grab coeff. conditional on optimal lambda
#eval b_ridge.beta_min

# Estimate beta for a given lambda (here 'lambda_min') value by applying the public function
smpl --contiguous LHS RHS
bhat = ridgeAux(b_ridge.lambda_min, {LHS}, {RHS})
bhat
